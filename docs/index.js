(()=>{"use strict";class t{static findIndex(e){return t.cart.findIndex((t=>t.id===e.id))}static addToCart(e){t.cart.push({id:e.id,amount:1,price:e.price}),t.saveCart()}static dropFromCart(e){t.cart.splice(t.findIndex(e),1),t.saveCart()}static increaseAmount(e){const r=t.findIndex(e);t.cart[r].amount+=1,t.saveCart()}static decreaseAmount(e){const r=t.findIndex(e);t.cart[r].amount-=1,t.saveCart()}static isProductInCart(e){return-1!==t.findIndex(e)}static getCartSum(){let e=0;return t.cart.forEach((t=>{e+=t.amount*t.price})),e}static getTotalAmount(){let e=0;return t.cart.forEach((t=>{e+=t.amount})),e}static saveCart(){localStorage.setItem("cart",JSON.stringify(t.cart))}static loadCart(){var e;const r=null!==(e=localStorage.getItem("cart"))&&void 0!==e?e:"[]";t.cart=JSON.parse(r)}static getProductTotalPrice(e){const r=t.findIndex(e);return t.cart[r].amount*t.cart[r].price}}const e=t;class r{static updateTotalCartDisplay(){r.totalSumCartDisplay.textContent=`$${e.getCartSum()}`,r.totalAmountCartDisplay.textContent=`${e.getTotalAmount()}`}}r.totalSumCartDisplay=document.querySelector(".header__sum-number"),r.totalAmountCartDisplay=document.querySelector(".cart-counter");const n=r;class a{static fillCard(t,r,a){const c=r.content.cloneNode(!0);c.className="card",c.querySelector(".card__title").textContent=t.title;const o=c.querySelector(".card__image");o.setAttribute("src",t.thumbnail),o.setAttribute("alt",t.title);const s=c.querySelector(".card__list");s.children[0].querySelector("span").textContent=t.category,s.children[1].querySelector("span").textContent=t.brand,s.children[2].querySelector("span").textContent=`$${t.price}`,s.children[3].querySelector("span").textContent=`${t.discountPercentage}`,s.children[4].querySelector("span").textContent=`${t.rating}`,s.children[5].querySelector("span").textContent=`${t.stock}`;const l=c.querySelector("a");l.href=`/product-details/${t.id}`,l.addEventListener("click",a);const i=c.querySelector(".add-to-cart-btn");return e.isProductInCart(t)&&(i.textContent="Drop"),i.addEventListener("click",(()=>{e.isProductInCart(t)?(e.dropFromCart(t),i.textContent="Add to cart"):(e.addToCart(t),i.textContent="Drop"),n.updateTotalCartDisplay()})),c}static draw(t,e){const r=document.querySelector(".cards");r.innerHTML="";const n=document.getElementById("card-template");n&&t.forEach((t=>r.append(a.fillCard(t,n,e))))}}const c=a;class o{static getProperties(t,e){const r={};return t.forEach((t=>{const n=t[e];r[n]=r[n]?r[n]+1:1})),r}static getMin(t,e){return Math.min(...t.map((t=>t[e])))}static getMax(t,e){return Math.max(...t.map((t=>t[e])))}static getCategories(t){return o.getProperties(t,"category")}static getBrands(t){return o.getProperties(t,"brand")}static getMinPrice(t){return o.getMin(t,"price")}static getMaxPrice(t){return o.getMax(t,"price")}static getMinStock(t){return o.getMin(t,"stock")}static getMaxStock(t){return o.getMax(t,"stock")}}const s=o;class l{static fillCheckboxGroup(t,e){const r=t.querySelector(".filters__list"),n=document.getElementById("checkbox-template");Object.keys(e).forEach((t=>{const e=n.content.cloneNode(!0),a=e.querySelector(".checkbox__input"),c=e.querySelector(".checkbox__label");a.id=t,c.htmlFor=t,c.textContent=t,r.append(e)}))}static fillRange(t,e,r,n){const a=t.querySelector(".range__from"),c=t.querySelector(".range__to"),o=[...t.querySelectorAll(".range__input")],s=t.querySelector(".range__bar");a.textContent=n?`$${e}`:`${e}`,c.textContent=n?`$${r}`:`${r}`;for(let t=0;t<o.length;t+=1)o[t].min=e.toString(),o[t].max=r.toString(),o[t].value=0===t?e.toString():r.toString();l.setRangeHandler(o[0],!0,o[0],o[1],0,a,n,s,e,r),l.setRangeHandler(o[1],!1,o[0],o[1],0,c,n,s,e,r)}static setRangeHandler(t,e,r,n,a,c,o,s,l,i){t.addEventListener("input",(()=>{const d=parseInt(r.value,10),u=parseInt(n.value,10);u-d<=a&&(t.value=(e?u-a:d+a).toString()),c.textContent=o?`$${t.value}`:`${t.value}`;const p=(d-l)/(i-l)*100,m=(u-l)/(i-l)*100;s.style.background=`linear-gradient(to right, #CCCCCC ${p}% , #1DA154 ${p}% , #1DA154 ${m}%, #CCCCCC ${m}%)`}))}static draw(t){const e=document.getElementById("filters-template").content.cloneNode(!0),r=[...e.querySelectorAll(".filters__group")],n=s.getCategories(t),a=s.getBrands(t);return l.fillCheckboxGroup(r[0],n),l.fillCheckboxGroup(r[1],a),l.fillRange(r[2],s.getMinPrice(t),s.getMaxPrice(t),!0),l.fillRange(r[3],s.getMinStock(t),s.getMaxStock(t),!1),e}}const i=l;class d{static setListeners(t){d.addCheckboxListener(t),d.addRangeListener(t),d.addSortListener(t),d.addSearchListener(t),d.addGridListener(t)}static addCheckboxListener(t){document.querySelector(".filters__checkboxes").addEventListener("click",(e=>{var r,n,a,c;if(e.preventDefault(),e.target instanceof HTMLLabelElement){const t=e.target.previousElementSibling,o=null===(c=null===(a=null===(n=null===(r=t.parentElement)||void 0===r?void 0:r.parentElement)||void 0===n?void 0:n.previousElementSibling)||void 0===a?void 0:a.textContent)||void 0===c?void 0:c.toLowerCase();if(t.checked){const e=d.appliedFilters[o].indexOf(t.id);d.appliedFilters[o].splice(e,1),0===d.appliedFilters[o].length&&delete d.appliedFilters[o]}else Object.prototype.hasOwnProperty.call(d.appliedFilters,o)?d.appliedFilters[o].push(t.id):d.appliedFilters[o]=[t.id]}t(d.appliedFilters)}))}static addRangeListener(t){document.querySelector(".filters__ranges").addEventListener("click",(e=>{var r,n,a,c,o;if(e.target instanceof HTMLInputElement){const s=null===(c=null===(a=null===(n=null===(r=e.target.parentElement)||void 0===r?void 0:r.parentElement)||void 0===n?void 0:n.previousElementSibling)||void 0===a?void 0:a.textContent)||void 0===c?void 0:c.toLowerCase(),l=null===(o=e.target.parentElement)||void 0===o?void 0:o.querySelectorAll(".range__input");d.appliedFilters[s]=[l[0].value,l[1].value],t(d.appliedFilters)}}))}static addSortListener(t){const e=document.querySelector(".sort");e.addEventListener("change",(()=>{const r=e.options[e.selectedIndex].value;e.selectedIndex=0,d.appliedFilters.sort=[r],t(d.appliedFilters)}))}static addSearchListener(t){const e=document.querySelector(".search");e.addEventListener("input",(()=>{const r=e.value;r.length>0?d.appliedFilters.search=[r]:delete d.appliedFilters.search,t(d.appliedFilters)}))}static addGridListener(t){document.querySelector(".products__grid-buttons").addEventListener("click",(e=>{e.target instanceof HTMLButtonElement&&(e.target.classList.contains("products__grid-button--matrix")&&(d.appliedFilters.grid=["matrix"]),e.target.classList.contains("products__grid-button--column")&&(d.appliedFilters.grid=["column"])),t(d.appliedFilters)}))}}d.appliedFilters={};const u=d;class p{static get instance(){return p.handlerInstance||(p.handlerInstance=new p),p.handlerInstance}static handleRangeView(t){t.forEach((t=>{const e=[...document.querySelectorAll(`.range__input[data-filter="${t[0]}"]`)];for(let r=0;r<e.length;r+=1)if(e[r]instanceof HTMLInputElement){e[r].value=t[1][r].toString();const n=new Event("input");e[r].dispatchEvent(n)}}))}static handleCheckboxesView(t){[...document.querySelectorAll(".checkbox__input")].forEach((e=>{e.checked=!1,t.includes(e.id)&&(e.checked=!0)}))}static filterProducts(t,e){let r=e;return t.forEach((t=>{if(p.filterKeys.includes(t[0])){const e=[],n=t[0];r.forEach((r=>{p.checkboxFilters.includes(t[0])&&t[1].includes(r[n])&&e.push(r),p.rangeFilters.includes(t[0])&&r[n]>=t[1][0]&&r[n]<=t[1][1]&&e.push(r)})),r=e}})),r}static handleFilters(t,e){const r=Object.entries(t),n=[],a=[];return r.forEach((t=>{p.checkboxFilters.includes(t[0])?n.push(...t[1]):p.rangeFilters.includes(t[0])&&a.push(t)})),p.handleCheckboxesView(n),p.handleRangeView(a),p.filterProducts(r,e)}}p.checkboxFilters=["category","brand"],p.rangeFilters=["price","stock"],p.filterKeys=[...p.checkboxFilters,...p.rangeFilters];const m=p,g=class{static handleSort(t,e){const r=[...e],n=document.querySelector(".sort"),a=t.sort[0].toString();n instanceof HTMLSelectElement&&(n.value=a);const[c,o]=a.split("-");return r.sort(((t,e)=>"ASC"===o?Number(t[c])-Number(e[c]):Number(e[c])-Number(t[c]))),r}},h=class{static handleSearch(t,e){const r=[],n=document.querySelector(".search"),a=t.search[0].toString();return n instanceof HTMLInputElement&&(n.value=a,n.focus()),e.forEach((t=>{const e=Object.entries(t);for(let n=0;n<e.length;n+=1)if(!["id","thumbnail","images"].includes(e[n][0])&&e[n][1].toString().toLowerCase().search(a.toLowerCase())>-1){r.push(t);break}})),r}},f=class{static createBlock(t,e){const r=document.createElement(t);return r.classList.add(...e),r}static createClone(t){return document.getElementById(t).content.cloneNode(!0)}static fillTextBlock(t,e,r,n=!1){t.querySelector(e).textContent=n?`$${r}`:r}static fillDataFields(t,e){Object.keys(e).forEach((r=>{const n=t.querySelector(`[data-field="${r}"]`);n instanceof HTMLImageElement?n.src=e[r].toString():n instanceof Element&&(n.textContent="price"===r?`$${e[r].toString()}`:e[r].toString())}))}},S=class{static draw(){return f.createClone("products-bar-template")}static updateProductsCount(t){document.querySelector(".products__found-count").textContent=`${t}`}};class y{static get allProducts(){return y._allProducts}static copyLinkHandler(t){navigator.clipboard.writeText(window.location.href).then((()=>{const e=t.target;e.textContent="Copied!",setTimeout((()=>{e.textContent="Copy link"}),500)})).catch((()=>{}))}static noProductsFound(){const t=document.querySelector(".cards");t.innerHTML="";const e=document.createElement("h1");e.textContent="No products Found",t.append(e)}static init(t){y._allProducts=t}static draw(t,e,r){const n=document.querySelector(".main");n.innerHTML="";const a=f.createBlock("div",["main-page","container"]),o=f.createBlock("div",["cards"]),s=f.createBlock("div",["products"]);n.append(a),a.append(i.draw(y.allProducts),s),s.append(S.draw(),o),u.appliedFilters=t,u.setListeners(e);const l=y.runFilters(o,t);l.length?c.draw(l,r):y.noProductsFound(),S.updateProductsCount(l.length);const d=document.querySelector("#copy-link-btn");null==d||d.addEventListener("click",y.copyLinkHandler);const p=document.querySelector("#reset-filters-btn");null==p||p.addEventListener("click",(()=>e({})))}static runFilters(t,e){let r;if(r=m.handleFilters(e,y.allProducts),Object.keys(e).includes("sort")&&(r=g.handleSort(e,r)),Object.keys(e).includes("search")&&(r=h.handleSearch(e,r)),Object.keys(e).includes("grid")){const[r]=[...e.grid];y.handleGridOption(t,r.toString())}return r}static handleGridOption(t,e){const r=[...document.querySelectorAll(".products__grid-button")];"column"===e&&(r[0].classList.remove("products__grid-button--active"),r[1].classList.add("products__grid-button--active"),t.classList.contains("cards--column")||t.classList.add("cards--column")),"matrix"===e&&(r[1].classList.remove("products__grid-button--active"),r[0].classList.add("products__grid-button--active"),t.classList.contains("cards--column")&&t.classList.remove("cards--column"))}}const C=y,_=class{static draw(){const t=document.querySelector(".main");t.children.length&&t.children[0].remove();const e=document.createElement("h1");e.textContent="Error 404. Page not found!",t.append(e)}};class v{static fillTextElements(t,e){for(let r=0;r<t.length;r+=1)t[r].textContent=`${e[r]}`}static setImageClickHandler(t,e){t.addEventListener("click",(t=>{t.target instanceof HTMLImageElement&&e.src!==t.target.src&&(e.src=t.target.getAttribute("src"))}))}static fillImages(t,e,r,n){const a=t.querySelector(e),c=t.querySelector(r);if([a.children[0],c].forEach((t=>{t.setAttribute("src",n.images[0]),t.setAttribute("alt",n.title)})),n.images.length>1)for(let t=1;t<n.images.length;t+=1){const e=a.children[0].cloneNode(!0);e.setAttribute("src",n.images[t]),a.append(e)}v.setImageClickHandler(a,c)}static fillPageTemplate(t){if(t){const e=document.getElementById("product-page-template").content.cloneNode(!0),r=[...e.querySelectorAll(".breadcrumbs__item")].slice(1),n=e.querySelector(".product__title"),a=[...e.querySelectorAll(".product__property span")],c=e.querySelector(".product__price span");v.fillTextElements([...r,n,...a,c],[t.category,t.brand,t.title,t.title,t.description,t.category,t.brand,t.rating,t.stock,t.discountPercentage,t.price]),v.fillImages(e,".product__images-list",".product__image--main",t);const o=document.querySelector(".main");o.children.length&&o.children[0].remove(),o.append(e)}else _.draw()}}const x=v;class b{static draw(){const t=f.createClone("cart-template"),e=localStorage.getItem("cart");"string"==typeof e&&("[]"===e?t.children[0].textContent="Cart is Empty":(b.fillProductsInfo(t,e),b.fillSummary(t)));const r=document.querySelector(".main");r.children.length&&r.children[0].remove(),r.append(t)}static fillProductsInfo(t,r){const n=t.querySelector(".order__list");JSON.parse(r).forEach(((t,r)=>{const a=f.createClone("order-item-template"),c=C.allProducts[t.id-1];f.fillTextBlock(a,".order__number",(r+1).toString()),f.fillDataFields(a,c),f.fillTextBlock(a,".order__amount",t.amount.toString()),f.fillTextBlock(a,".order__price span",e.getProductTotalPrice(c).toString(),!0),[...a.querySelectorAll(".order__button")].forEach((t=>{t.dataset.id=c.id.toString()})),n.append(a)})),b.setAmountButtonHandler(n)}static fillSummary(t){f.fillTextBlock(t,".summary__products span",e.getTotalAmount().toString()),f.fillTextBlock(t,".summary__total span",e.getCartSum().toString(),!0)}static setAmountButtonHandler(t){t.addEventListener("click",(t=>{var r,a;if(t.target instanceof HTMLButtonElement){const c=null===(r=t.target.parentElement)||void 0===r?void 0:r.querySelector(".order__amount");let o=Number(c.textContent);const s=Number(t.target.dataset.id),l=C.allProducts[s-1];if("decrease"===t.target.dataset.amount&&(1===o?(e.dropFromCart(l),b.draw(),o=0):(e.decreaseAmount(l),c.textContent=(o-1).toString())),"increase"===t.target.dataset.amount&&o!==C.allProducts[s-1].stock&&(e.increaseAmount(l),c.textContent=(o+1).toString()),0!==o){const t=null===(a=c.parentElement)||void 0===a?void 0:a.parentElement;f.fillTextBlock(t,".order__price span",e.getProductTotalPrice(l).toString(),!0)}const i=document.querySelector(".summary");i instanceof HTMLElement&&b.fillSummary(i),n.updateTotalCartDisplay()}}))}}const E=b;class k{static setUrlParams(t){const e=k.transformToUrlParams(t);window.history.pushState(t,"",e),k.handleLocation()}static transformToUrlParams(t){const e=Object.entries(t).map((([t,e])=>`${t}=${e.join(";")}`)).join("&");return`?${encodeURIComponent(e)}`}static transformUrlParams(t){const e={};return t&&decodeURIComponent(t).substring(1).split("&").forEach((t=>{const[r,n]=t.split("=");e[r]=null==n?void 0:n.split(";")})),e}static handleLocation(){const t=window.location.pathname,e=k.transformUrlParams(window.location.search);if("/"===t)C.draw(e,k.setUrlParams,k.setRoute);else switch(t.split("/")[1]){case"product-details":x.fillPageTemplate(C.allProducts[Number(t.split("/")[2])-1]);break;case"cart":E.draw();break;default:_.draw()}}}k.setRoute=t=>{const e=t||window.event;let r;e.preventDefault(),e.currentTarget instanceof HTMLAnchorElement&&(r=e.currentTarget.href),window.history.pushState({},"",r),k.handleLocation()};const L=k;class q{static errorHandler(t){if(t.ok)return t;throw 401!==t.status&&404!==t.status||console.log(`Sorry, but there is ${t.status} error: ${t.statusText}`),Error(t.statusText)}static fetchProductsData(){return fetch("https://dummyjson.com/products?limit=100").then((t=>q.errorHandler(t))).then((t=>t.json())).then((t=>t.products))}}const P=q,T=document.getElementById("logo-link");null==T||T.addEventListener("click",(t=>L.setRoute(t)));const w=document.getElementById("cart-link");null==w||w.addEventListener("click",(t=>L.setRoute(t))),e.loadCart(),n.updateTotalCartDisplay(),P.fetchProductsData().then((t=>{C.init(t),L.handleLocation()})).catch((t=>console.log(t))),window.addEventListener("popstate",(()=>L.handleLocation()))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,